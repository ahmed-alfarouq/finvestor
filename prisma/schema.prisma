// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  firstName             String
  lastName              String
  address               String
  city                  String
  state                 String
  postalCode            String
  dateOfBirth           String
  ssn                   String
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String
  dwollaCustomerUrl     String
  dwollaCustomerId      String
  savingsGoal           String?
  savingsGoalAccounts   String[]
  expensesGoals         ExpensesGoal[]
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  bankAccounts          BankAccount[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid()) @map("_id")
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model BankAccount {
  id               String @id @default(cuid()) @map("_id")
  userId           String @db.ObjectId
  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankId           String
  accountId        String
  accessToken      String
  fundingSourceUrl String
  sharableId       String
}

model ExpensesGoal {
  id           String   @id @default(cuid()) @map("_id")
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastModified DateTime
  amount       String
  category     String

  @@unique([userId, category])
}
